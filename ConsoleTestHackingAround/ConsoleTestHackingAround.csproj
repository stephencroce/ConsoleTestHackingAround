<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{2A9A3160-8826-4143-845D-CAD187072AB5}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ConsoleTestHackingAround</RootNamespace>
    <AssemblyName>ConsoleTestHackingAround</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="ClassLibraryHack">
      <HintPath>..\..\ClassLibraryHack\ClassLibraryHack\bin\Debug\ClassLibraryHack.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Practices.Unity, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Unity.3.5.1404.0\lib\net45\Microsoft.Practices.Unity.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Practices.Unity.Configuration">
      <HintPath>..\packages\Unity.3.5.1404.0\lib\net45\Microsoft.Practices.Unity.Configuration.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Practices.Unity.RegistrationByConvention">
      <HintPath>..\packages\Unity.3.5.1404.0\lib\net45\Microsoft.Practices.Unity.RegistrationByConvention.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.configuration" />
    <Reference Include="System.Configuration.Install" />
    <Reference Include="System.Core" />
    <Reference Include="System.ServiceProcess" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="BooleanFun.cs" />
    <Compile Include="Car.cs" />
    <Compile Include="CommandManager.cs" />
    <Compile Include="CustomConfigSections\MongoDatastoreConfigSection.cs" />
    <Compile Include="CustomConfigSections\MongoDatastoresSection.cs" />
    <Compile Include="CustomConfigSections\MyCustomConfigHandler.cs" />
    <Compile Include="CustomConfigSections\ServiceConfigurationSection.cs" />
    <Compile Include="CustomConfigSections\TunnelSection.cs" />
    <Compile Include="DemoManager.cs" />
    <Compile Include="DependencyInjectionExample1\Client.cs" />
    <Compile Include="DependencyInjectionExample1\IService.cs" />
    <Compile Include="DependencyInjectionExample1\Service.cs" />
    <Compile Include="DependencyInjectionExample2\Company.cs" />
    <Compile Include="DependencyInjectionExample2\Employee.cs" />
    <Compile Include="DependencyInjectionExample2\ICompany.cs" />
    <Compile Include="DependencyInjectionExample2\IEmployee.cs" />
    <Compile Include="DependencyInjectionExample3\Company.cs" />
    <Compile Include="DependencyInjectionExample3\Employee.cs" />
    <Compile Include="Dragster.cs" />
    <Compile Include="Facade\Facade.cs" />
    <Compile Include="Facade\SubSystems\SubSystemFour.cs" />
    <Compile Include="Facade\SubSystems\SubSystemThree.cs" />
    <Compile Include="Factory\EmployeeClasses\clerk.cs" />
    <Compile Include="Factory\EmployeeFactory.cs" />
    <Compile Include="Factory\EmployeeClasses\manager.cs" />
    <Compile Include="Factory\position.cs" />
    <Compile Include="Factory\EmployeeClasses\programmer.cs" />
    <Compile Include="FileSystemWriter.cs" />
    <Compile Include="FunWithOut.cs" />
    <Compile Include="IComparableDemo\Temperature.cs" />
    <Compile Include="MyWindowsServiceInstaller.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Process\ProcessDemo.cs" />
    <Compile Include="Program.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Facade\SubSystems\SubSystemOne.cs" />
    <Compile Include="Facade\SubSystems\SubSystemTwo.cs" />
    <Compile Include="ScreenHelper.cs" />
    <Compile Include="Vehicle.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config">
      <SubType>Designer</SubType>
    </None>
    <None Include="App.Debug.config">
      <DependentUpon>App.config</DependentUpon>
    </None>
    <None Include="App.Release.config">
      <DependentUpon>App.config</DependentUpon>
    </None>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <UsingTask TaskName="TransformXml" AssemblyFile="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\Web\Microsoft.Web.Publishing.Tasks.dll" />
  <Target Name="AfterCompile" Condition="Exists('App.$(Configuration).config')">
    <!--Generate transformed app config in the intermediate directory-->
    <TransformXml Source="App.config" Destination="$(IntermediateOutputPath)$(TargetFileName).config" Transform="App.$(Configuration).config" />
    <!--Force build process to use the transformed configuration file from now on.-->
    <ItemGroup>
      <AppConfigWithTargetPath Remove="App.config" />
      <AppConfigWithTargetPath Include="$(IntermediateOutputPath)$(TargetFileName).config">
        <TargetPath>$(TargetFileName).config</TargetPath>
      </AppConfigWithTargetPath>
    </ItemGroup>
  </Target>
  <!--Override After Publish to support ClickOnce AfterPublish. Target replaces the untransformed config file copied to the deployment directory with the transformed one.-->
  <Target Name="AfterPublish">
    <PropertyGroup>
      <DeployedConfig>$(_DeploymentApplicationDir)$(TargetName)$(TargetExt).config$(_DeploymentFileMappingExtension)</DeployedConfig>
    </PropertyGroup>
    <!--Publish copies the untransformed App.config to deployment directory so overwrite it-->
    <Copy Condition="Exists('$(DeployedConfig)')" SourceFiles="$(IntermediateOutputPath)$(TargetFileName).config" DestinationFiles="$(DeployedConfig)" />
  </Target>
</Project>